
@page "/fetchdataconst_prenme"

@using SQLiteDemoWithBlazorApp.Data
@using SQLiteDemoWithBlazorApp.Models
@using SQLiteDemoWithBlazorApp.Services
@inject IStudentService StudentService
@inject NavigationManager NavManager
<h1>const_prenme List</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Gender</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in students)
                {
                    <tr>
                        <td>@student.preid</td>
                        <td>@student.prenme</td>
                        <td>@student.prenmefull</td>
						@*<td>
						<button type="submit" @onclick="@(()=> EditStudent(student.StudentID))" class="btn btn-primary">Edit</button>
					</td>*@
					<td>
						<button type="submit" @onclick="@(()=> DeleteStudent(student))" class="btn btn-primary">Delete</button>
					</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}

@code {
    private List<const_prenme> students;

    protected override async Task OnInitializedAsync()
    {
        students = await StudentService.GetAll_const_prenme();
    }

    private void EditStudent(int studentID)
    {
        NavManager.NavigateTo($"update_student/{studentID}");
    }

    private async void DeleteStudent(const_prenme student)
    {
        var response = await StudentService.Delete_const_prenme(student);
        if (response > 0)
        {
            await OnInitializedAsync();
            this.StateHasChanged();
        }
    }
}

